dir()
setwd("~/Documents/GitHub/UPCH-species-distribution-tutorial")
library(sf); library(rgbif); library(dplyr)
#read in IUCN species names for bats in Peru
iucn_species <- read_sf("iucn_peruvian_passerines") #this shape file was downloaded from ICUN redlist site
names(iucn_species)[3] <- "scientificName" #needs to match gbif to work
#create a dataframe with the scientific name, and all the occurrences of the sandfly
latlong <- data.frame()
#for loop to get lat long
for (i in 1:1379){
tryCatch({
b <- data.frame(occ_search(scientificName = iucn_species$scientificName[i])$data)
#filter so that only the recorded occurrences are in the dataframe
if("decimalLatitude" %in% colnames(b)){
c <- subset(b, select=c("scientificName", "decimalLatitude", "decimalLongitude", "year"))
#some of the occurrences have weird names, so we just rename that column to their scientific name
c[1:nrow(b), 1] <- iucn_species$scientificName[i]
latlong <- rbind(latlong, c)
}
}, error=function(e){})
}
#get rid of all the occurrences with no lat longs and create a csv
g <- latlong[complete.cases(latlong), ]
#clip occurrence points to only ones that fall in MDD
mdd0 <- read_sf("Madre_de_Dios");
mdd <- st_union(mdd0)
pnts_sf <- st_as_sf(g, coords = c('decimalLongitude', 'decimalLatitude'), crs = st_crs(mdd))
pnts_sf$indicator <- st_within(pnts_sf, mdd) %>% lengths > 0
pnts_mdd <- subset(pnts_sf, indicator == TRUE)
pnts_mdd <- pnts_mdd %>%
dplyr::mutate(lon = sf::st_coordinates(.)[,1],
lat = sf::st_coordinates(.)[,2])
pnts_mdd <- st_drop_geometry(pnts_mdd)
write.csv(pnts_mdd,"passerine_occ_pts_mdd.csv", row.names = TRUE)
library(ggplot2)
no_axis <- theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
names <- unique(pnts_mdd$scientificName) #look at distribution by species
names
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[1]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[2]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[3]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[3]
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[4]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[5]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[6]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[7]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[8]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[8]
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[9]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[10]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[10]
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[11]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[12]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[13]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[14]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_mdd, scientificName == names[15]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[15]
table(mdd$scientificName)
table(pnts_mdd$scientificName)
r <- raster(ncol=180, nrow=180)
library(raster)
r <- raster(ncol=180, nrow=180)
r
r <- raster(ncol=180, nrow=180, res = 0.001)
r
extent(r) <- extent(mdd)
bbox(mdd)
mdd
st_bbox(mdd)
extent(r) <- st_bbox(mdd)
r
res(r)
?raster
st_bbox(mdd)
r <- raster(xmn = 72.428739, xmx = -68.652279, ymn = -13.341717, ymx = -9.873393, res = 0.001)
r <- raster(xmn = -72.428739, xmx = -68.652279, ymn = -13.341717, ymx = -9.873393, res = 0.001)
r
pnts_mdd
names(pnts_mdd)
names(pnts_mdd[4:5])
s <- gridSample(pnts_mdd[4:5], r, n=1)
s <- dismo::gridSample(pnts_mdd[4:5], r, n=1)
s <- dismo::gridSample(pnts_mdd[pnts_mdd$scientificName == "Poecilotriccus albifacies", 4:5], r, n=1)
s <- dismo::gridSample(pnts_mdd[pnts_mdd$scientificName == "Corythopis torquatus", 4:5], r, n=1)
s
s0 <- dismo::gridSample(pnts_mdd[pnts_mdd$scientificName != "Corythopis torquatus", 4:5], r, n=1)
unique(pnts_mdd$year)
pnts_mdd <- read.csv("passerine_occ_pts_mdd.csv")
background <- pnts_mdd[pnts_mdd$scientificName != "Corythopis torquatus"]
background <- pnts_mdd[pnts_mdd$scientificName != "Corythopis torquatus", ]
bg_species_list <- unique(background$scientificName)
names(background)
r <- raster(xmn = -72.428739, xmx = -68.652279, ymn = -13.341717, ymx = -9.873393, res = 0.001)
library(raster)
r <- raster(xmn = -72.428739, xmx = -68.652279, ymn = -13.341717, ymx = -9.873393, res = 0.001)
bg_longlat <- cellFromXY(r, bg_points) %>% as.data.frame() %>%
cbind(background$year) %>%
mutate(count = 1) %>% setNames(c("cell","date","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
max_year = max(year),
avg_year = mean(year)) %>%
arrange(desc(count)) %>%
mutate(longitude = xFromCell(r, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
latitude = yFromCell(r, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(longitude) & !is.na(latitude))
library(sf); library(rgbif); library(dplyr); library(raster)
bg_longlat <- cellFromXY(r, bg_points) %>% as.data.frame() %>%
cbind(background$year) %>%
mutate(count = 1) %>% setNames(c("cell","date","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
max_year = max(year),
avg_year = mean(year)) %>%
arrange(desc(count)) %>%
mutate(longitude = xFromCell(r, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
latitude = yFromCell(r, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(longitude) & !is.na(latitude)) # Remove the NA locations
bg_points <- background %>% dplyr::select(c(lon, lat)) %>%
as.matrix()
bg_longlat <- cellFromXY(r, bg_points) %>% as.data.frame() %>%
cbind(background$year) %>%
mutate(count = 1) %>% setNames(c("cell","date","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
max_year = max(year),
avg_year = mean(year)) %>%
arrange(desc(count)) %>%
mutate(longitude = xFromCell(r, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
latitude = yFromCell(r, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(longitude) & !is.na(latitude)) # Remove the NA locations
names(background)
bg_longlat <- cellFromXY(r, bg_points) %>% as.data.frame() %>%
cbind(background$year) %>%
mutate(count = 1) %>% setNames(c("cell","year","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
max_year = max(year),
avg_year = mean(year)) %>%
arrange(desc(count)) %>%
mutate(longitude = xFromCell(r, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
latitude = yFromCell(r, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(longitude) & !is.na(latitude)) # Remove the NA locations
bg_mask_sf <- st_as_sf(bg_longlat, coords = c("lon","lat"),
agr = "constant", crs = 4326)
names(bg_longlat)
bg_mask_sf <- st_as_sf(bg_longlat, coords = c("longitude","latitude"),
agr = "constant", crs = 4326)
set.seed(9)
multiplier <- 2
bg_mask_weights <- bg_mask_sf %>%
mutate(weight = count/sum(count))
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = multiplier * nrow(thin.occ),
replace = FALSE,
prob = bg_mask_weights$weight),]
s <- dismo::gridSample(pnts_mdd[pnts_mdd$scientificName == "Corythopis torquatus", 4:5], r, n=1) #65 obs for focal species
names(pnts_mdd[pnts_mdd$scientificName == "Corythopis torquatus", 4:5])
names(pnts_mdd)
s <- dismo::gridSample(pnts_mdd[pnts_mdd$scientificName == "Corythopis torquatus", c("lon", "lat")], r, n=1) #65 obs for focal species
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = multiplier * nrow(s),
replace = FALSE,
prob = bg_mask_weights$weight),]
names(bg_mask_df)
names(pnts_mdd)
occ_points <- pnts_mdd[s, c("scientificName", "year", "lon", "lat")]
s
occ_points <- pnts_mdd[row.names(s), c("scientificName", "year", "lon", "lat")]
bg_mask_df
2*65
nrow(s)
multiplier * nrow(s)
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = multiplier * nrow(s), # s is from earlier code chunk
replace = FALSE,
prob = bg_mask_weights$weight),]
bg_mask_weights <- bg_mask_sf %>%
mutate(weight = count/sum(count))
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = multiplier * nrow(s), # s is from earlier code chunk
replace = FALSE,
prob = bg_mask_weights$weight),]
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = 130, #multiplier * nrow(s), # s is from earlier code chunk
replace = FALSE,
prob = bg_mask_weights$weight),]
bg_mask_weights
bg_mask_df <- bg_mask_weights[sample(nrow(bg_mask_weights),
size = 130, #multiplier * nrow(s), # s is from earlier code chunk
replace = FALSE,
prob = bg_mask_weights$weight),]
sample(nrow(bg_mask_weights),
size = 130, #multiplier * nrow(s), # s is from earlier code chunk
replace = FALSE,
prob = bg_mask_weights$weight)
test <- sample(nrow(bg_mask_weights),
size = 130, #multiplier * nrow(s), # s is from earlier code chunk
replace = FALSE,
prob = bg_mask_weights$weight)
test
bg_mask_df <- bg_mask_sf[test, ]
names(background)
bg_points <- background %>% dplyr::select(c(lon, lat)) %>%
as.matrix()
bg_longlat <- cellFromXY(r, bg_points) %>% as.data.frame() %>%
cbind(background$year, background$scientificName) %>%
mutate(count = 1) %>% setNames(c("cell","year", "scientificName","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
max_year = max(year),
avg_year = mean(year)) %>%
arrange(desc(count)) %>%
mutate(lon = xFromCell(r, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
lat = yFromCell(r, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(lon) & !is.na(lat)) # Remove the NA locations
names(bg_longlat)
bg_mask_sf <- st_as_sf(bg_longlat, coords = c("longitude","latitude"),
agr = "constant", crs = 4326)
bg_mask_sf <- st_as_sf(bg_longlat, coords = c("lon","lat"),
agr = "constant", crs = 4326)
bg_mask_sf
bg_longlat <- cellFromXY(r, bg_points) %>% as.data.frame() %>%
cbind(background$year, background$scientificName) %>%
mutate(count = 1) %>% setNames(c("cell","year", "scientificName","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
scientificName = scientificName,
max_year = max(year),
avg_year = mean(year)) %>%
arrange(desc(count)) %>%
mutate(lon = xFromCell(r, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
lat = yFromCell(r, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(lon) & !is.na(lat)) # Remove the NA locations
bg_longlat
bg_mask_sf <- st_as_sf(bg_longlat, coords = c("lon","lat"),
agr = "constant", crs = 4326)
bg_mask_sf
set.seed(9)
multiplier <- 2
bg_mask_weights <- bg_mask_sf %>%
mutate(weight = count/sum(count))
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = multiplier * nrow(s), # s is from earlier code chunk, # of occ points
replace = FALSE,
prob = bg_mask_weights$weight),]
bg_mask_df
bg_longlat <- cellFromXY(r, bg_points) %>% as.data.frame() %>%
cbind(background$year, background$scientificName) %>%
mutate(count = 1) %>% setNames(c("cell","year", "scientificName","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
scientificName = scientificName,
max_year = max(year),
avg_year = mean(year)) %>%
arrange(desc(count)) %>%
mutate(lon = xFromCell(r, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
lat = yFromCell(r, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(lon) & !is.na(lat)) # Remove the NA locations
bg_mask_sf <- st_as_sf(bg_longlat, coords = c("lon","lat"),
agr = "constant", crs = 4326)
set.seed(9)
multiplier <- 2
bg_mask_weights <- bg_mask_sf %>%
mutate(weight = count/sum(count))
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = multiplier * nrow(s), # s is from earlier code chunk, # of occ points
replace = FALSE,
prob = bg_mask_weights$weight),]
bg_mask_df <- cbind(bg_mask_df, st_coordinates(bg_mask_df))
bg_mask_df
bg_mask_df <- st_drop_geometry(bg_mask_df)
names(bg_mask_df)[6:7] <- c("lon", "lat")
names(bg_mask_df)[c(4,6:7)] <- c("year", "lon", "lat")
names(bg_mask_df)
bg_mask_df <- bg_mask_df[, c("scientificName", "year", "lon", "lat")]
bg_mask_df$presence <- 0
occ_points <- pnts_mdd[row.names(s), c("scientificName", "year", "lon", "lat")]; occ_points$presence <- 1
final_pass <- rbind(occ_points, bg_mask_df)
final_pass$row_code <- seq(1, nrow(final_pass), by = 1)
head(final_pass)
write.csv(final_pass, "final_passerine_dataset_Oct20_2022.csv")
# Plot each species
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, fill = presence), alpha = 0.5) +
theme_minimal() +
no_axis
library(ggplot2)
# Plot each species
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, fill = presence), alpha = 0.5) +
theme_minimal() +
no_axis
mdd0 <- read_sf("Madre_de_Dios");
mdd <- st_union(mdd0)
# Remove plot axis
no_axis <- theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
# Plot each species
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, fill = presence), alpha = 0.5) +
theme_minimal() +
no_axis
# Plot each species
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, fill = as.factor(presence)), alpha = 0.5) +
theme_minimal() +
no_axis
table(final_pass$presence)
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, color = as.factor(presence)), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, color = as.factor(presence)), size = 1, alpha = 0.5) +
theme_minimal() +
no_axis
final_pass$presence <- as.factor(final_pass$presence)
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, color = presence), size = 1, alpha = 0.5) +
theme_minimal() +
no_axis
final_pass$species <- ifelse(final_pass$species == "Corythopis torquatus",
"C_torquatus", "bkg_species")
final_pass$species <- ifelse(final_pass$scientificName == "Corythopis torquatus",
"C_torquatus", "bkg_species")
ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, color = species), size = 1, alpha = 0.5) +
theme_minimal() +
no_axis
point_distribution <- ggplot() +
geom_sf(data=mdd, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = final_pass,
aes(x = lon, y = lat, color = species), size = 1, alpha = 0.5) +
theme_minimal() +
no_axis
ggsave(point_distribution, "c_torquatus_sdm_point_distribution.tiff", dpi = 300)
ggsave("c_torquatus_sdm_point_distribution.tiff", point_distribution, dpi = 300)
ggsave("c_torquatus_sdm_point_distribution.tiff", point_distribution, dpi = 75)
ggsave("c_torquatus_sdm_point_distribution.tiff", point_distribution, dpi = 300)
ggsave("c_torquatus_sdm_point_distribution.ong", point_distribution, dpi = 300)
ggsave("c_torquatus_sdm_point_distribution.png", point_distribution, dpi = 100)
ggsave("c_torquatus_sdm_point_distribution.png", point_distribution, dpi = 150)
dir()
dir('data')
occ_data <- read.csv("data/final_passerine_dataset_Oct20_2022.csv")
mapbiomas <- read.csv("data/passerine_lulc_Oct2022.csv")
human_population <- read.csv("data/passerine_population_Oct2022.csv")
head(mapbiomas)
unique(mapbiomas$class)
length(unique(mapbiomas$class))
names(mapbiomas)
library(tidyr)
mapbiomas_mean <- mapbiomas %>%
group_by(row_code, class) %>%
summarise(mean_area = mean(area))
library(dplyr)
mapbiomas_mean <- mapbiomas %>%
group_by(row_code, class) %>%
summarise(mean_area = mean(area))
mapbiomas_mean
mapbiomas$class[mapbiomas$class == 3] <- "forest_formation"
mapbiomas$class[mapbiomas$class == 6] <- "flooded_forest"
mapbiomas$class[mapbiomas$class == 11] <- "wetland"
mapbiomas$class[mapbiomas$class == 12] <- "grassland"
mapbiomas$class[mapbiomas$class == 14] <- "farming"
mapbiomas$class[mapbiomas$class == 24] <- "urban"
mapbiomas$class[mapbiomas$class == 25] <- "other_non_vegetated"
mapbiomas$class[mapbiomas$class == 30] <- "mining"
mapbiomas$class[mapbiomas$class == 33] <- "river_lake_ocean"
mapbiomas
head(population)
install.packages("gclus")
library(gclus)
names(mapbiomas_mean)
mapbiomas_mean_wide <- mapbiomas_mean %>%
pivot_wider(names_from = class, values_from = area)
mapbiomas_mean_wide <- mapbiomas_mean %>%
pivot_wider(names_from = class, values_from = mean_area)
mapbiomas_mean_wide
mapbiomas$class[mapbiomas$class == 3] <- "forest_formation"
mapbiomas$class[mapbiomas$class == 6] <- "flooded_forest"
mapbiomas$class[mapbiomas$class == 11] <- "wetland"
mapbiomas$class[mapbiomas$class == 12] <- "grassland"
mapbiomas$class[mapbiomas$class == 14] <- "farming"
mapbiomas$class[mapbiomas$class == 24] <- "urban"
mapbiomas$class[mapbiomas$class == 25] <- "other_non_vegetated"
mapbiomas$class[mapbiomas$class == 30] <- "mining"
mapbiomas$class[mapbiomas$class == 33] <- "river_lake_ocean"
#----------------------------------------------------------#
#summarize average area per class per point across years   #
#----------------------------------------------------------#
mapbiomas_mean <- mapbiomas %>%
group_by(row_code, class) %>%
summarise(mean_area = mean(area))
mapbiomas_mean
mapbiomas_mean_wide <- mapbiomas_mean %>%
pivot_wider(names_from = class, values_from = mean_area)
mapbiomas_mean_wide[is.na(mapbiomas_mean_wide)] <- 0
mapbiomas_mean_wide
0.0163/100
0.0163/0.1
corr <- abs(cor(mapbiomas_mean[2:ncol(mapbiomas_mean)]))
mapbiomas_mean[2:ncol(mapbiomas_mean)]
corr <- abs(cor(mapbiomas_mean_wide[2:ncol(mapbiomas_mean_wide)]))
corr
order <- order.single(corr)
order
cpairs(mapbiomas_mean_wide[2:ncol(mapbiomas_mean_wide)], # data frame of variables
order,                   # Order of the variables
border.color = "grey70", # Borders color
gap = 0.45,              # Distance between subplots
show.points = TRUE,      # If FALSE, removes all the points
pch = 21) # Colors by group
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(mapbiomas_mean_wide[2:ncol(mapbiomas_mean_wide)], histogram = TRUE, method = "pearson")
?chart.Correlation
