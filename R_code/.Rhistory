aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[145]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[146]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[147]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[148]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[148]
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[149]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[149]
s <- dismo::gridSample(pnts_ab[pnts_ab$scientificName == "Rhinophylla fischerae", c("lon", "lat")], r, n=1) #136 obs for focal species
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[150]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[150]
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[151]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[152]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[153]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[154]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[155]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[156]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[157]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[157]
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[158]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[159]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[160]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[161]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[161]
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[162]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[162]
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[163]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[164]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[164]
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[165]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[166]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[167]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[167]
s <- dismo::gridSample(pnts_ab[pnts_ab$scientificName == "Sturnira magna", c("lon", "lat")], r, n=1) #136 obs for focal species
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[168]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[169]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[169]
names[170]
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[170]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[171]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[172]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[173]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[174]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[175]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[176]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[176]
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[177]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
names[177]
s <- dismo::gridSample(pnts_ab[pnts_ab$scientificName == "Uroderma magnirostrum", c("lon", "lat")], r, n=1) #136 obs for focal species
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[178]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[179]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[180]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == names[181]),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
s <- dismo::gridSample(pnts_ab[pnts_ab$scientificName == "Bradypus tridactylus", c("lon", "lat")], r, n=1) #136 obs for focal species
s0 <- dismo::gridSample(pnts_ab[pnts_ab$scientificName != "Bradypus tridactylus", c("lon", "lat")], r, n=1) #1874 obs for background species
background <- pnts_ab[pnts_ab$scientificName != "Bradypus tridactylus", ]
bg_species_list <- unique(background$scientificName)
bg_points <- background %>% dplyr::select(c(lon, lat)) %>%
as.matrix()
bg_longlat <- cellFromXY(r, bg_points) %>% as.data.frame() %>%
cbind(background$year, background$scientificName) %>%
mutate(count = 1) %>% setNames(c("cell","year", "scientificName","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
scientificName = scientificName,
max_year = max(year),
avg_year = mean(year)) %>%
arrange(desc(count)) %>%
mutate(lon = xFromCell(r, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
lat = yFromCell(r, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(lon) & !is.na(lat)) # Remove the NA locations
bg_mask_sf <- st_as_sf(bg_longlat, coords = c("lon","lat"),
agr = "constant", remove = FALSE, crs = 4326)
# Random sample bg without replacement from weighted bias mask at (2x occ) multiplier
set.seed(909)
multiplier <- 2
bg_mask_weights <- bg_mask_sf %>%
mutate(weight = count/sum(count))
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = multiplier * nrow(s), # s is from earlier code chunk, # of occ points
replace = FALSE,
prob = bg_mask_weights$weight),]
#make bkg dataset match presence
bg_mask_df <- st_drop_geometry(bg_mask_df)
names(bg_mask_df)[c(4)] <- c("year"); bg_mask_df <- bg_mask_df[, c("scientificName", "year", "lon", "lat")]
#make sure bkg points are labeled
bg_mask_df$presence <- 0
#subset presence points to thin set, make sure it is lableled
occ_points <- pnts_ab[row.names(s), c("scientificName", "year", "lon", "lat")]; occ_points$presence <- 1
#final passerine occ set
final_pass <- rbind(occ_points, bg_mask_df)
#add in row identifier for GEE
final_pass$row_code <- seq(1, nrow(final_pass), by = 1)
no_axis <- theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
##for mapping purposes
final_pass$species <- ifelse(final_pass$scientificName == "Bradypus tridactylus",
"B_tridactylus", "bkg_species")
# Plot each species
point_distribution <- ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 1, alpha = 0.5) +
theme_minimal() +
no_axis
point_distribution
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.5, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 1, alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 5, alpha = 0.5) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 2, alpha = 0.5) +
theme_minimal() +
no_axis
final_pass$species <- ifelse(final_pass$scientificName == "Bradypus tridactylus",
"B_tridactylus", "background_species")
point_distribution <- ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 2, alpha = 0.5) +
theme_minimal() +
no_axis
point_distribution
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 2, alpha = 1) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 2, alpha = 0.25) +
theme_minimal() +
no_axis
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 2, alpha = 0.75) +
theme_minimal() +
no_axis
set.seed(909)
multiplier <- 1.5
bg_mask_weights <- bg_mask_sf %>%
mutate(weight = count/sum(count))
bg_mask_df <- bg_mask_sf[sample(nrow(bg_mask_weights),
size = multiplier * nrow(s), # s is from earlier code chunk, # of occ points
replace = FALSE,
prob = bg_mask_weights$weight),]
#make bkg dataset match presence
bg_mask_df <- st_drop_geometry(bg_mask_df)
names(bg_mask_df)[c(4)] <- c("year"); bg_mask_df <- bg_mask_df[, c("scientificName", "year", "lon", "lat")]
#make sure bkg points are labeled
bg_mask_df$presence <- 0
#subset presence points to thin set, make sure it is lableled
occ_points <- pnts_ab[row.names(s), c("scientificName", "year", "lon", "lat")]; occ_points$presence <- 1
#final passerine occ set
final_pass <- rbind(occ_points, bg_mask_df)
#add in row identifier for GEE
final_pass$row_code <- seq(1, nrow(final_pass), by = 1)
# Remove plot axis
no_axis <- theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
##for mapping purposes
final_pass$species <- ifelse(final_pass$scientificName == "Bradypus tridactylus",
"B_tridactylus", "background_species")
# Plot each species
point_distribution <- ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 2, alpha = 0.75) +
theme_minimal() +
no_axis
point_distribution
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=.15, show.legend = FALSE) +
geom_point(data = subset(pnts_ab, scientificName == "Atelocynus microtis"),
aes(x = lon, y = lat), alpha = 0.5) +
theme_minimal() +
no_axis
final_pass$species <- ifelse(final_pass$scientificName == "Bradypus tridactylus",
"Bradypus tridactylus", "background species")
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 2, alpha = 0.75) +
theme_minimal() +
no_axis
dir()
ggsave("final_figures/b_tridactylus_sdm_point_distribution.png", point_distribution, dpi = 300)
write.csv(final_pass, "b_tridactylus_ter_mammals_amazon_thinned_Oct22.csv")
write.csv(final_pass, "data/b_tridactylus_ter_mammals_amazon_thinned_Oct22.csv")
ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 0.5, alpha = 0.75) +
theme_minimal() +
no_axis
point_distribution <- ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", size=0.15, show.legend = FALSE) +
geom_jitter(data = final_pass,
aes(x = lon, y = lat, color = species), size = 0.5, alpha = 0.75) +
theme_minimal() +
no_axis
ggsave("final_figures/b_tridactylus_sdm_point_distribution.png", point_distribution, dpi = 300)
#load libraries
library(tidyr); library(dplyr); library(PerformanceAnalytics)
#-----------------------------------#
#read in datasets                   #
#-----------------------------------#
occ_data <- read.csv("data/b_tridactylus_ter_mammals_amazon_thinned_Oct22.csv")
mapbiomas <- read.csv("data/b_tridactylus_ter_mammals_lulc_Oct2022.csv")
unique(mapbiomas$class)
length(unique(mapbiomas$class))
#relabel each class to make it easier to see results
mapbiomas$class[mapbiomas$class == 3] <- "forest_formation"
mapbiomas$class[mapbiomas$class == 4] <- "savannah_formation"
mapbiomas$class[mapbiomas$class == 5] <- "mangrove"
mapbiomas$class[mapbiomas$class == 6] <- "flooded_forest"
mapbiomas$class[mapbiomas$class == 11] <- "wetland"
mapbiomas$class[mapbiomas$class == 12] <- "grassland"
mapbiomas$class[mapbiomas$class == 13] <- "non_forested_natural"
mapbiomas$class[mapbiomas$class == 14] <- "farming"
mapbiomas$class[mapbiomas$class == 24] <- "urban"
mapbiomas$class[mapbiomas$class == 25] <- "other_non_vegetated"
mapbiomas$class[mapbiomas$class == 27] <- "not_observed"
mapbiomas$class[mapbiomas$class == 29] <- "rocky_outcrop"
mapbiomas$class[mapbiomas$class == 30] <- "mining"
mapbiomas$class[mapbiomas$class == 33] <- "river_lake_ocean"
mapbiomas_mean <- mapbiomas %>%
group_by(row_code, class) %>%
summarise(mean_area = mean(area))
mapbiomas_mean_wide <- mapbiomas_mean %>%
pivot_wider(names_from = class, values_from = mean_area)
#change NAs to zero as NA means the landclass is not present
mapbiomas_mean_wide[is.na(mapbiomas_mean_wide)] <- 0
mapbiomas_mean_wide
corr <- abs(cor(mapbiomas_mean_wide[2:ncol(mapbiomas_mean_wide)]))
chart.Correlation(mapbiomas_mean_wide[2:ncol(mapbiomas_mean_wide)],
histogram = TRUE, method = "pearson")
write.csv("data/b_tridactylus_ter_mammals_lulc_cleaned_Oct2022.csv")
lulc <- read.csv("data/b_tridactylus_ter_mammals_lulc_cleaned_Oct2022.csv")
amazon_basin_pnts <-  read.csv("data/b_tridactylus_ter_mammals_amazon_thinned_Oct22.csv.csv")
data0 <- left_join(amazon_basin_pnts, lulc, by = "row_code")
library(tidyr); library(dplyr); library(spatialsample); library(sf)
setwd("~/Documents/GitHub/UPCH-species-distribution-tutorial/R_code")
lulc <- read.csv("data/b_tridactylus_ter_mammals_lulc_cleaned_Oct2022.csv")
amazon_basin_pnts <-  read.csv("data/b_tridactylus_ter_mammals_amazon_thinned_Oct22.csv.csv")
data0 <- left_join(amazon_basin_pnts, lulc, by = "row_code")
dir()
lulc <- read.csv("../data/b_tridactylus_ter_mammals_lulc_cleaned_Oct2022.csv")
amazon_basin_pnts <-  read.csv("../data/b_tridactylus_ter_mammals_amazon_thinned_Oct22.csv.csv")
write.csv(mapbiomas_mean_wide, "data/b_tridactylus_ter_mammals_lulc_cleaned_Oct2022.csv")
write.csv(mapbiomas_mean_wide, "../data/b_tridactylus_ter_mammals_lulc_cleaned_Oct2022.csv")
lulc <- read.csv("../data/b_tridactylus_ter_mammals_lulc_cleaned_Oct2022.csv")
amazon_basin_pnts <-  read.csv("../data/b_tridactylus_ter_mammals_amazon_thinned_Oct22.csv")
data0 <- left_join(amazon_basin_pnts, lulc, by = "row_code")
data0_sf <- st_as_sf(x = data0,
coords = c("lon", "lat"),
crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
#identify groups of 5 clusters using the spatialsample package
clusters <- spatial_clustering_cv(data0_sf, v = 5) #k-means clustering to identify 5 cross-validation folds
#for loop to create a dataframe that assigns a fold number to each data point
splits_df <- c()
for(i in 1:5){
new_df <- assessment(clusters$splits[[i]]) #extract points in fold number i
new_df$fold <- i
new_df <- new_df[,c("row_code", "fold")]
splits_df <- rbind(splits_df, new_df) #bind all points x fold id together
}
splits_df <- st_drop_geometry(splits_df) #drop shapefiles
#final data - merge cluster id to final dataset for analysis
analysis_data <- merge(data0, splits_df, by = "row_code")
#sanity check: check how many data points are in each fold
table(analysis_data$fold)
summary(analysis_data)
names(analysis_data)
write.csv(analysis_data[,8], "../data/b_tridactylus_ter_mammals_finalData_Oct22.csv")
write.csv(analysis_data[,-8], "data/b_tridactylus_ter_mammals_finalData_Oct22.csv")
write.csv(analysis_data[,-8], "../data/b_tridactylus_ter_mammals_finalData_Oct22.csv")
names(analysis_data[,-8])
library(ranger)
setwd("~/Desktop/UPCH-species-distribution-tutorial-main/")
library(sf); library(rgbif); library(dplyr); library(raster); library(ggplot2)
dir(
)
dir(../)
dir("../")
dir('../data')
data <- read.csv("../data/ter_mammals_amazon_notThinned_Oct22.csv")
all_data_plot <- ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", alpha = 0.5, size=.15, show.legend = FALSE) +
geom_jitter(data =  subset(data, scientificName != "Ateles chamek"),
aes(x = lon, y = lat), color = "darkgrey", alpha = 0.75) + #plot potential bkg points
geom_jitter(data = subset(data, scientificName == "Ateles chamek"),
aes(x = lon, y = lat), color = "blue", alpha = 0.5) + #plot focal species
theme_minimal()
ab0 <- read_sf("Amazon_Basin")
ab0 <- read_sf("../Amazon_Basin")
ab <- st_union(ab0); plot(ab) # create one figure and plot it to make sure it looks correct
sf_use_s2(FALSE) # may need to switch off spherical geometry
ab <- st_union(ab0); plot(ab) # create one figure and plot it to make sure it looks correct
all_data_plot <- ggplot() +
geom_sf(data=ab, color="#2D3E50", fill="lightgrey", alpha = 0.5, size=.15, show.legend = FALSE) +
geom_jitter(data =  subset(data, scientificName != "Ateles chamek"),
aes(x = lon, y = lat), color = "darkgrey", alpha = 0.75) + #plot potential bkg points
geom_jitter(data = subset(data, scientificName == "Ateles chamek"),
aes(x = lon, y = lat), color = "blue", alpha = 0.5) + #plot focal species
theme_minimal()
all_data_plot
dir("../")
dir("../final_figures/all_amazon_mammals_plot.png", all_data_plot, dpi = 300)
ggsave("../final_figures/all_amazon_mammals_plot.png", all_data_plot, dpi = 300)
